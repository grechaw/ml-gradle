/*
 * This buildscript declares the ml-gradle dependency and the repositories that contain ml-gradle and its dependencies.
 * This block is always needed in order to use ml-gradle.
 */
buildscript {
    repositories {
        mavenCentral()
        maven {url "http://developer.marklogic.com/maven2/"}
        maven {url "http://rjrudin.github.io/marklogic-java/releases"}
    }
    dependencies { classpath mlGradleDependency }
}


/*
 * This first block is optional, and it shows one way to override properties based on an environment property that is
 * set when calling Gradle. For example, you could run "gradle -Penv=qa mlDeploy" in order to apply the env-qa.gradle
 * build file, which would set properties based on the QA environment. This doesn't have anything to do with ml-gradle -
 * it just shows one technique for overriding properties. See env-prod.gradle and env-qa.gradle for more details. 
 */
if (project.hasProperty("env")) {
    def buildFile = "env-" + project.property("env") + ".gradle"
    println "Applying environment-based build file: " + buildFile
    apply from: buildFile
}


/*
 * This is another optional block, and it's a similar technique to the block above, but it instead is used for local
 * development. A developer can create a non-version-controlled local.gradle file and, within that file, override any
 * properties that are defined in gradle.properties. This also isn't specific to ml-gradle - it's just one way with
 * Gradle to allow a developer to easily override gradle.properties for local development purposes. 
 */
if (new File("local.gradle").exists()) {
    println "Applying local.gradle file"
    apply from: "local.gradle"
    println "Applied local.gradle file"
}


/*
 * In order to use ml-gradle, it must be applied. This occurs after the two above blocks for overriding properties so
 * that those blocks can override properties before ml-gradle initializes itself.
 */
apply plugin: 'ml-gradle'


/*
 * Everything below this line is optional and is intended to show different features provided by ml-gradle.
 */


/*
 * The Java plugin is used to compile and run JUnit tests.
 */
apply plugin: 'java'


/*
 * For generating IDE project files you might consider leveraging the Eclipse or IntelliJ IDEA plugin.
 */
apply plugin: 'eclipse'
apply plugin: 'idea'


/*
 * This lists the repositories for finding project dependencies (which differ from buildscript dependencies - buildscript
 * dependencies are not included in project artifacts that are built). These repositories are needed to satisfy the
 * dependencies expressed below.
 */
repositories {
    mavenCentral()
    maven {url "http://developer.marklogic.com/maven2/"}
    maven {url "http://rjrudin.github.io/marklogic-java/releases"}
}


configurations {
    // This custom Gradle configuration allows us to specify the classpath for running Corb jobs. This is only needed if
    // you want to run Corb jobs via Gradle tasks. More info on Corb can be found at - http://developer.marklogic.com/code/corb.
    corb
}


/*
 * This expresses dependencies on the ml-java and ml-junit libraries. The former is typically used for application
 * code, and the latter supports writing JUnit-based tests. A dependency exists on RestAssured to show an option for
 * using that library in tests that must invoke MarkLogic HTTP endpoints.
 */
dependencies {
    // Needed to compile and run the JUnit tests
    testCompile "com.rjrudin:ml-junit:2.3"
    testCompile "com.jayway.restassured:rest-assured:2.4.1"

    // Located at https://github.com/rjrudin/marklogic-java/tree/gh-pages/releases/com/marklogic/corb
    corb "com.marklogic:corb:1.0"
    corb "com.marklogic:marklogic-xcc:8.0.3"
}


/*
 * ml-gradle adds an instance of com.rjrudin.marklogic.appdeployer.AppConfig to the Gradle project under the key "mlAppConfig".
 * This instance can be modified to affect the behavior of ml-gradle.
 */
ext {
    // mlAppConfig is an instance of com.rjrudin.marklogic.appdeployer.AppConfig
    mlAppConfig {
        // Example of adding custom tokens; these will then be replaced in any JSON/XML config files
        customTokens.put("sample-key", "sample-value")
        customTokens.put("%%ODBC_PORT%%", "8102")
        customTokens.put("%%XDBC_PORT%%", "8103")

        // By default, the createTriggersDatabase attribute is set to true, which results in a triggers database being
        // created, even if a databases/triggers-database.json file isn't present. Un-commenting the line will below
        // will prevent one from being created (assuming the triggers-database.json file isn't present).
        //createTriggersDatabase = false

        // Example of adding a path for modules to the list of module paths, which defaults to src/main/ml-modules
        // modulePaths.add("src/another-modules-dir")
        // You can also override the list of module paths
        // modulePaths = ["src/another-modules-dir"]

        // You can have multiple config files for your content database. This is useful when you have a dependency on
        // a package of MarkLogic modules that requires some content database config, and you don't want to duplicate
        // that in your own content-database.json file. Instead, just add the file from your
        // build/mlRestApi/(name of dependency)/ml-config/databases directory.
        configDir.contentDatabaseFiles.add(new File("src/main/ml-config/databases/more-content-database-config.json"))

        // For the tasks below that depend on XCC - such as for running corb or creating triggers - the following URL
        // will be used. In this sample project, the sample-project-rest-admin user has the privileges necessary to
        // create triggers, so we use that user.
        contentXccUrl = "xcc://${mlRestAdminUsername}:${mlRestAdminPassword}@${mlHost}:8000/${mlAppConfig.contentDatabaseName}"
    }
}


/*
 * For tests that reference test files in the test source tree, we need to tell Gradle to copy these to src/test/resources
 * so that they can be found when running "gradle test".
 */
sourceSets.test.resources.srcDir 'src/test/java'


/*
 * This is an example of both a custom Gradle task and an easy way of invoking Corb. This depends on "mlLoadModules" to
 * ensure that the Corb uris/transform modules are loaded. It also uses as a classpath the custom configuration named
 * "corb" that we defined earlier. Note that the sample uris.xqy and transform.xqy modules just print a log statement 
 * for each document in your content database, so unless there are documents, you won't see any result from this. You
 * of course can modify the transform.xqy module to perform any action that you would like - this is just to show how
 * to invoke corb from Gradle.
 */
task runCorb(dependsOn: ['mlLoadModules'], type: JavaExec) {
    main = 'com.marklogic.developer.corb.Manager'
    classpath = configurations.corb
    args = [contentXccUrl, '""', 'transform.xqy', '4', 'uris.xqy', '/ext/sample-project/corb/', 'sample-project-modules', 'false']
}


/*
 * The management API has an operation for loading the default CPF pipelines - 
 * http://docs.marklogic.com/REST/POST/manage/v2/databases/[id-or-name]/pipelines. To load these as part of your
 * deployment process, just uncomment the line below. These pipelines will be loaded before your custom pipelines and 
 * domains, which means you can safely reference them in your domain configuration files. 
 */
ext {
    //mlAppDeployer.commands.add(new com.rjrudin.marklogic.appdeployer.command.cpf.LoadDefaultPipelinesCommand())
}


/*
 * Since our REST API server uses a certificate template, we need to execute an extra command to generate a temporary
 * certificate for this template - without that, the REST API server won't be able to receive HTTP or HTTPS requests.
 */
ext {
    def command = new com.rjrudin.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
    command.setTemplateIdOrName("sample-project-template")
    command.setCommonName("localhost")
    command.setValidFor(365)
    mlAppDeployer.commands.add(command)
}


/*
 * As of ML 8.0-3, triggers can not yet be managed via the Management REST API, so we still rely on a custom Gradle task
 * that uses XCC to create the trigger.
 */
task createSampleTrigger(type: com.rjrudin.marklogic.gradle.task.trigger.CreateTriggersTask) {
    xccUrl = contentXccUrl
    triggerName = "sample-project-trigger"
    description = "This is an example of creating a trigger"
    dataEventCommit = "post"
    dataEventScopeArgs = ["some-collection"]
    dataEventContentArgs = ["create", "modify", "delete"]
    moduleRoot = "/"
    modulePath = "/ext/sample-project/trigger/sample-trigger.xqy"
}


/*
 * Example of attaching the creation of our trigger to the end of the mlDeploy process. mlPostDeploy is an empty task
 * that is called by mlDeploy after mlAppDeploy runs; mlPostDeploy thus allows for any additional tasks to be added to
 * the deployment process. 
 */
mlPostDeploy.dependsOn createSampleTrigger


/*
 * Example of including a custom command in the deployment process. The order in which it's invoked is determined by
 * the command's "getExecuteSortOrder" method.
 */
ext {
    mlAppDeployer.commands.add(new ClearTriggersDatabaseCommand())
}


/*
 * Below is an example of a custom command, which also fixes a bug in ML that should be fixed in the 8.0-4 release. The 
 * bug is - when a pipeline is updated via the Management REST API,  pipeline states are dropped. To address this, we 
 * insert a command to clear the triggers database before any CPF resources are created, thus forcing a create instead 
 * of an update, thereby bypassing the bug. This example also shows how the ManageClient instance in CommandContext can
 * be used to easily make any call to the Management REST API. Note that this class could also be defined in the Gradle
 * buildSrc directory, which is really a better option for keeping your build.gradle file slim.
 */
import com.rjrudin.marklogic.appdeployer.command.AbstractCommand;
import com.rjrudin.marklogic.appdeployer.command.CommandContext;
import com.rjrudin.marklogic.appdeployer.command.SortOrderConstants;

class ClearTriggersDatabaseCommand extends AbstractCommand {
    public Integer getExecuteSortOrder() {
        return SortOrderConstants.DEPLOY_DEFAULT_PIPELINES - 1;
    }
    public void execute(CommandContext context) {
        String dbName = context.getAppConfig().getTriggersDatabaseName();
        logger.info("Clearing database: " + dbName);
        context.getManageClient().postJson("/manage/v2/databases/" + dbName, '{"operation":"clear-database"}');
        logger.info("Cleared database: " + dbName)
    }
}


/*
 * Sometimes, you need a custom step, but you want it to be a separate task - not a command that's included when 
 * mlDeploy is invoked. Below is a task that extends MarkLogicTask, which provides access to a number of helpful 
 * objects for implementing custom functionality.
 */
task mergeContentDatabase(type: com.rjrudin.marklogic.gradle.task.MarkLogicTask) {
    description = "Call this task to initiate a merge on the content database"
    doLast {
        getManageClient().postJson("/manage/v2/databases/" + getAppConfig().getContentDatabaseName(), '{"operation":"merge-database"}')
    }
}
